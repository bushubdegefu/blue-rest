package observe

import (
	"context"
	"fmt"
	"strings"

	"github.com/google/uuid"

	"{{.ProjectName}}/configs"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"github.com/gofiber/fiber/v2"
	"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc"
	"go.opentelemetry.io/otel/propagation"
	"go.opentelemetry.io/otel/sdk/resource"
	sdktrace "go.opentelemetry.io/otel/sdk/trace"
	semconv "go.opentelemetry.io/otel/semconv/v1.4.0"
	oteltrace "go.opentelemetry.io/otel/trace"
)

var AppTracer = otel.Tracer(fmt.Sprintf("cli-server-%v", configs.AppConfig.GetOrDefault("APP_NAME", "blue-app")))

func InitTracer() *sdktrace.TracerProvider {
	traceExporter := configs.AppConfig.Get("TRACE_EXPORTER")
	tracerHost := configs.AppConfig.Get("TRACER_HOST")
	tracerPort := configs.AppConfig.GetOrDefault("TRACER_PORT", "9411")

	tp := sdktrace.NewTracerProvider(
		sdktrace.WithResource(resource.NewWithAttributes(
			semconv.SchemaURL,
			semconv.ServiceNameKey.String(configs.AppConfig.Get("APP_NAME")),
		)),
	)
	// app logger with jager

	otel.SetTracerProvider(tp)
	otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))
	// otel.SetErrorHandler(&otelErrorHandler{logger: app_logger})

	const traceExporterFiber = "jaeger"
	exportedTo := fmt.Sprintf("%s:%s", tracerHost, tracerPort)
	fmt.Println("Exporting traces to:", exportedTo)

	if (traceExporter != "" && tracerHost != "") || traceExporter == traceExporterFiber {
		var (
			exporter sdktrace.SpanExporter
			// err      error
		)

		switch strings.ToLower(traceExporter) {
		case "jaeger":
			// app_logger.Log("Exporting traces to jaeger.")

			exporter, _ = otlptracegrpc.New(context.Background(), otlptracegrpc.WithInsecure(),
				otlptracegrpc.WithEndpoint(fmt.Sprintf("%s:%s", tracerHost, tracerPort)))

			batcher := sdktrace.NewBatchSpanProcessor(exporter)
			tp.RegisterSpanProcessor(batcher)
		}
	}
	return tp
}


func FiberAppSpanner(ctx *fiber.Ctx, span_name string ) (context.Context, oteltrace.Span) {
	gen, _ := uuid.NewV7()
	id := gen.String()

	trace, span := AppTracer.Start(ctx.UserContext(), span_name,
		oteltrace.WithAttributes(attribute.String("id", id)),
		oteltrace.WithAttributes(attribute.String("request", ctx.Request().String())),
	)
	return trace, span
}



type RouteTracer struct {
	Tracer context.Context
	Span   oteltrace.Span
}
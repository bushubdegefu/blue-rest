package common

import (
	"math"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

type ResponseHTTP struct {
	Success bool        {{.BackTick}}json:"success"{{.BackTick}}
	Data    interface{} {{.BackTick}}json:"data"{{.BackTick}}
	Message string      {{.BackTick}}json:"details"{{.BackTick}}
}

type ResponsePagination struct {
	Success bool        {{.BackTick}}json:"success"{{.BackTick}}
	Items   interface{} {{.BackTick}}json:"data"{{.BackTick}}
	Message string      {{.BackTick}}json:"details"{{.BackTick}}
	Total   uint        {{.BackTick}}json:"total"{{.BackTick}}
	Page    uint        {{.BackTick}}json:"page"{{.BackTick}}
	Size    uint        {{.BackTick}}json:"size"{{.BackTick}}
	Pages   uint        {{.BackTick}}json:"pages"{{.BackTick}}
}

func Pagination(db *gorm.DB, queryModel interface{}, responseObjectModel interface{}, page uint, size uint, tracer context.Context) (ResponsePagination, error) {
	//  protection against requesting large amount of data
	//  set to 50
	var update_size uint
	if size > 50 {
		size = 50
	}

	count_channel := make(chan int64)
	str_chann := make(chan string)
	defer func() {
		close(str_chann)
		close(count_channel)
	}()
	offset := (page-1) * update_size
	//finding count value
	go func(comm <-chan int64) {
		var local_counter int64
		if tracer != nil {
			db.WithContext(tracer).Select("*").Model(&queryModel).Count(&local_counter)
		} else {
			db.Select("*").Model(&queryModel).Count(&local_counter)
		}
		count_channel <- local_counter

	}(count_channel)
	//  set offset value for page One
	var response_page int64
	go func(comm <-chan string) {
		if page == 1 {
			if tracer != nil {
				db.WithContext(tracer).Order("id asc").Limit(int(size)).Offset(0).Preload(clause.Associations).Find(&responseObjectModel)

			} else {
				db.Order("id asc").Limit(int(size)).Offset(0).Preload(clause.Associations).Find(&responseObjectModel)

			}

			response_page = 1
		} else {
			if tracer != nil {
				db.WithContext(tracer).Order("id asc").Limit(int(size)).Offset(int(offset)).Preload(clause.Associations).Find(&responseObjectModel)

			} else {
				db.Order("id asc").Limit(int(size)).Offset(int(offset)).Preload(clause.Associations).Find(&responseObjectModel)
			}
			// response_channel <- loc_resp
			response_page = int64(page)
		}
		str_chann <- "completed"
	}(str_chann)
	count := <-count_channel
	response_obj := <-str_chann
	pages := math.Ceil(float64(count) / float64(size))

	result := ResponsePagination{
		Success: true,
		Items:   responseObjectModel,
		Message: response_obj,
		Total:   uint(count),
		Page:    uint(response_page),
		Size:    uint(size),
		Pages:   uint(pages),
	}
	return result, nil
}

func PaginationPureModel(db *gorm.DB, queryModel interface{}, responseObjectModel interface{}, page uint, size uint, tracer context.Context) (ResponsePagination, error) {
	if size > 100 {
		size = 100
	}
	count_channel := make(chan int64)
	str_chann := make(chan string)
	defer func() {
		close(str_chann)
		close(count_channel)
	}()

	offset := (page-1) * size
	//finding count value
	go func(comm <-chan int64) {
		var local_counter int64
		if tracer != nil {
			db.WithContext(tracer).Select("*").Model(&queryModel).Count(&local_counter)
		} else {
			db.Select("*").Model(&queryModel).Count(&local_counter)
		}
		count_channel <- local_counter

	}(count_channel)
	//  set offset value for page One
	var response_page int64
	go func(comm <-chan string) {
		if page == 1 {
			if tracer != nil {
				db.WithContext(tracer).Model(&queryModel).Order("id asc").Limit(int(size)).Offset(0).Find(&responseObjectModel)
			} else {
				db.Model(&queryModel).Order("id asc").Limit(int(size)).Offset(0).Find(&responseObjectModel)
			}
			response_page = 1
		} else {
			if tracer != nil {
				db.WithContext(tracer).Model(&queryModel).Order("id asc").Limit(int(size)).Offset(int(offset)).Find(&responseObjectModel)
			} else {
				db.Model(&queryModel).Order("id asc").Limit(int(size)).Offset(int(offset)).Find(&responseObjectModel)
			}
			// response_channel <- loc_resp
			response_page = int64(page)
		}
		str_chann <- "completed"
	}(str_chann)

	count := <-count_channel
	response_obj := <-str_chann
	pages := math.Ceil(float64(count) / float64(size))
	result := ResponsePagination{
		Success: true,
		Items:   responseObjectModel,
		Message: response_obj,
		Total:   uint(count),
		Page:    uint(response_page),
		Size:    uint(size),
		Pages:   uint(pages),
	}
	return result, nil
}

func PaginationPureModelSearch(db *gorm.DB, queryModel interface{}, responseObjectModel interface{}, page uint, size uint, tracer context.Context, searchTerm map[string]interface{}) (ResponsePagination, error) {
	if size > 100 {
		size = 100
	}

	count_channel := make(chan int64)
	str_chann := make(chan string)
	defer func() {
		close(str_chann)
		close(count_channel)
	}()

	offset := (page-1) * size

	// Create a base query
	query := db.Model(&queryModel)

	// Apply search filters dynamically based on the provided searchTerm map
	if len(searchTerm) > 0 {
			// Loop through the searchTerm map and dynamically apply filters( for boolean values)
			for key, value := range searchTerm {
				// Search logic for boolean values
				if boolValue, ok := value.(string); ok && (boolValue == "true" || boolValue == "false") {
					switch boolValue {
					case "true":
						query = query.Where(key+" = ?", true)
					case "false":
						query = query.Where(key+" = ?", false)

					}
					delete(searchTerm, key)
				}

			}

		// Loop through the searchTerm map and dynamically apply filters
		for key, value := range searchTerm {
			// Apply "LIKE" condition for string fields (or exact match for other types)
			if strValue, ok := value.(string); ok  && strValue != ""{
				query = query.Or(key+" LIKE ?", "%"+strValue+"%")
			}
		}
	}

	// Finding count value
	go func(comm <-chan int64) {
		var local_counter int64
		if tracer != nil {
			query.WithContext(tracer).Select("*").Count(&local_counter)
		} else {
			query.Select("*").Count(&local_counter)
		}
		count_channel <- local_counter
	}(count_channel)

	// Set offset value for pagination
	var response_page int64
	go func(comm <-chan string) {
		if page == 1 {
			if tracer != nil {
				query.WithContext(tracer).Order("id asc").Limit(int(size)).Offset(0).Find(&responseObjectModel)
			} else {
				query.Order("id asc").Limit(int(size)).Offset(0).Find(&responseObjectModel)
			}
			response_page = 1
		} else {
			if tracer != nil {
				query.WithContext(tracer).Order("id asc").Limit(int(size)).Offset(int(offset)).Find(&responseObjectModel)
			} else {
				query.Order("id asc").Limit(int(size)).Offset(int(offset)).Find(&responseObjectModel)
			}
			response_page = int64(page)
		}
		str_chann <- "completed"
	}(str_chann)

	count := <-count_channel
	response_obj := <-str_chann
	pages := math.Ceil(float64(count) / float64(size))

	result := ResponsePagination{
		Success: true,
		Items:   responseObjectModel,
		Message: response_obj,
		Total:   uint(count),
		Page:    uint(response_page),
		Size:    uint(size),
		Pages:   uint(pages),
	}

	return result, nil
}

// Generic function to filter the map based on a list of allowed keys.
func FilterMapByKeys(input map[string]any, allowedKeys []string) map[string]any {
	filtered := make(map[string]any)

	for _, key := range allowedKeys {
		if value, ok := input[key]; ok {
			filtered[key] = value
		}
	}

	return filtered
}

func PaginationPureModelFilterOneToMany(db *gorm.DB, queryModel interface{}, responseObjectModel interface{}, otm_string string, parentID uint,
	page uint, size uint, tracer context.Context) (ResponsePagination, interface{}, error) {
	if size > 100 {
		size = 100
	}
	count_channel := make(chan int64)
	str_chann := make(chan string)
	defer func() {
		close(str_chann)
		close(count_channel)
	}()

	offset := (page-1) * size
	//finding count value
	go func(comm <-chan int64) {
		var local_counter int64
		if tracer != nil {
			db.WithContext(tracer).Select("*").Model(&queryModel).Where(otm_string, parentID).Count(&local_counter)
		} else {
			db.WithContext(tracer).Select("*").Model(&queryModel).Where(otm_string, parentID).Count(&local_counter)
		}
		count_channel <- local_counter

	}(count_channel)
	//  set offset value for page One
	var response_page int64
	go func(comm <-chan string) {
		if page == 1 {
			if tracer != nil {
				db.WithContext(tracer).Model(&queryModel).Where(otm_string, parentID).Order("id asc").Limit(int(size)).Offset(0).Find(&responseObjectModel)
			} else {
				db.WithContext(tracer).Model(&queryModel).Where(otm_string, parentID).Order("id asc").Limit(int(size)).Offset(0).Find(&responseObjectModel)
			}
			response_page = 1
		} else {
			if tracer != nil {
				db.WithContext(tracer).Model(&queryModel).Where(otm_string, parentID).Order("id asc").Limit(int(size)).Offset(int(offset)).Find(&responseObjectModel)
			} else {
				db.WithContext(tracer).Model(&queryModel).Where(otm_string, parentID).Order("id asc").Limit(int(size)).Offset(int(offset)).Find(&responseObjectModel)
			}
			// response_channel <- loc_resp
			response_page = int64(page)
		}
		str_chann <- "completed"
	}(str_chann)

	count := <-count_channel
	response_obj := <-str_chann
	pages := math.Ceil(float64(count) / float64(size))
	result := ResponsePagination{
		Success: true,
		Items:   responseObjectModel,
		Message: response_obj,
		Total:   uint(count),
		Page:    uint(response_page),
		Size:    uint(size),
		Pages:   uint(pages),
	}
	return result, responseObjectModel, nil
}